// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: queries.sql

package database

import (
	"context"
	"database/sql"
)

const clearSubscriptions = `-- name: ClearSubscriptions :exec
DELETE FROM subscriptions
WHERE user_id = ? AND dog_id = ? and type = ?
`

type ClearSubscriptionsParams struct {
	UserID int64
	DogID  int64
	Type   string
}

func (q *Queries) ClearSubscriptions(ctx context.Context, arg ClearSubscriptionsParams) error {
	_, err := q.db.ExecContext(ctx, clearSubscriptions, arg.UserID, arg.DogID, arg.Type)
	return err
}

const getDog = `-- name: GetDog :one
SELECT id, name, birth_date, sex, breed FROM dogs WHERE id = ?
`

func (q *Queries) GetDog(ctx context.Context, id int64) (Dog, error) {
	row := q.db.QueryRowContext(ctx, getDog, id)
	var i Dog
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.BirthDate,
		&i.Sex,
		&i.Breed,
	)
	return i, err
}

const getInvite = `-- name: GetInvite :one
SELECT id, hash, dog_id, type, used FROM invite_subscriptions
WHERE used = false AND hash = ?
`

func (q *Queries) GetInvite(ctx context.Context, hash string) (InviteSubscription, error) {
	row := q.db.QueryRowContext(ctx, getInvite, hash)
	var i InviteSubscription
	err := row.Scan(
		&i.ID,
		&i.Hash,
		&i.DogID,
		&i.Type,
		&i.Used,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, telegram_id, name, language, current_dog, state FROM users WHERE telegram_id = ?
`

func (q *Queries) GetUser(ctx context.Context, telegramID int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, telegramID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.TelegramID,
		&i.Name,
		&i.Language,
		&i.CurrentDog,
		&i.State,
	)
	return i, err
}

const markInviteUsed = `-- name: MarkInviteUsed :exec
UPDATE invite_subscriptions
SET used = true
where id = ?
`

func (q *Queries) MarkInviteUsed(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, markInviteUsed, id)
	return err
}

const newAction = `-- name: NewAction :exec
INSERT INTO actions (user_id, dog_id, timestamp, action_id, additional_info)
VALUES (?, ?, ?, ?, ?)
`

type NewActionParams struct {
	UserID         int64
	DogID          int64
	Timestamp      int64
	ActionID       int64
	AdditionalInfo sql.NullString
}

func (q *Queries) NewAction(ctx context.Context, arg NewActionParams) error {
	_, err := q.db.ExecContext(ctx, newAction,
		arg.UserID,
		arg.DogID,
		arg.Timestamp,
		arg.ActionID,
		arg.AdditionalInfo,
	)
	return err
}

const newDog = `-- name: NewDog :one
INSERT INTO dogs (name, birth_date, sex, breed)
VALUES (?, ?, ?, ?)
RETURNING id
`

type NewDogParams struct {
	Name      string
	BirthDate string
	Sex       string
	Breed     string
}

func (q *Queries) NewDog(ctx context.Context, arg NewDogParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, newDog,
		arg.Name,
		arg.BirthDate,
		arg.Sex,
		arg.Breed,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const newInvite = `-- name: NewInvite :exec
INSERT INTO invite_subscriptions (hash, dog_id, type)
VALUES (?, ?, ?)
`

type NewInviteParams struct {
	Hash  string
	DogID int64
	Type  string
}

func (q *Queries) NewInvite(ctx context.Context, arg NewInviteParams) error {
	_, err := q.db.ExecContext(ctx, newInvite, arg.Hash, arg.DogID, arg.Type)
	return err
}

const newSubscription = `-- name: NewSubscription :exec
INSERT INTO subscriptions (dog_id, user_id, type)
VALUES (?, ?, ?)
`

type NewSubscriptionParams struct {
	DogID  int64
	UserID int64
	Type   string
}

func (q *Queries) NewSubscription(ctx context.Context, arg NewSubscriptionParams) error {
	_, err := q.db.ExecContext(ctx, newSubscription, arg.DogID, arg.UserID, arg.Type)
	return err
}

const newUser = `-- name: NewUser :exec
INSERT INTO users (telegram_id, name, language)
VALUES (?, ?, ?)
`

type NewUserParams struct {
	TelegramID int64
	Name       string
	Language   string
}

func (q *Queries) NewUser(ctx context.Context, arg NewUserParams) error {
	_, err := q.db.ExecContext(ctx, newUser, arg.TelegramID, arg.Name, arg.Language)
	return err
}

const selectDogsSubscribers = `-- name: SelectDogsSubscribers :many
SELECT id, telegram_id, name, language, current_dog, state FROM users
where id in (
    select user_id from subscriptions
    where dog_id = ?
)
`

func (q *Queries) SelectDogsSubscribers(ctx context.Context, dogID int64) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, selectDogsSubscribers, dogID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.TelegramID,
			&i.Name,
			&i.Language,
			&i.CurrentDog,
			&i.State,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectUsersDogs = `-- name: SelectUsersDogs :many
Select id, name, birth_date, sex, breed FROM dogs
where id in (
    select dog_id from subscriptions
    where type = 'owner' and user_id = ?
)
`

func (q *Queries) SelectUsersDogs(ctx context.Context, userID int64) ([]Dog, error) {
	rows, err := q.db.QueryContext(ctx, selectUsersDogs, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Dog
	for rows.Next() {
		var i Dog
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.BirthDate,
			&i.Sex,
			&i.Breed,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setUserCurDog = `-- name: SetUserCurDog :exec
UPDATE users
SET current_dog = ?
WHERE id = ?
`

type SetUserCurDogParams struct {
	CurrentDog sql.NullInt64
	ID         int64
}

func (q *Queries) SetUserCurDog(ctx context.Context, arg SetUserCurDogParams) error {
	_, err := q.db.ExecContext(ctx, setUserCurDog, arg.CurrentDog, arg.ID)
	return err
}

const setUserLanguage = `-- name: SetUserLanguage :exec
UPDATE users
SET language = ?
WHERE telegram_id = ?
`

type SetUserLanguageParams struct {
	Language   string
	TelegramID int64
}

func (q *Queries) SetUserLanguage(ctx context.Context, arg SetUserLanguageParams) error {
	_, err := q.db.ExecContext(ctx, setUserLanguage, arg.Language, arg.TelegramID)
	return err
}

const setUserState = `-- name: SetUserState :exec
UPDATE users
SET state = ?
WHERE id = ?
`

type SetUserStateParams struct {
	State string
	ID    int64
}

func (q *Queries) SetUserState(ctx context.Context, arg SetUserStateParams) error {
	_, err := q.db.ExecContext(ctx, setUserState, arg.State, arg.ID)
	return err
}
